# This is a basic workflow to help you get started with Actions

name: CI

on:
  schedule:
  - cron: "*/5 * * * *"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
    - name: Run a multi-line script
      run: |
        echo "INICIALIZANDO AUTOMAÇÃO"

        sudo apt-get update
        sudo apt-get install jq

        echo "Listando pull request abertos"

        api_pull='https://api.github.com/repos/'${{ github.repository }}'/pulls'

        response=$(curl -s --write-out "%{http_code}" "$api_pull" \
        --header 'Accept: application/vnd.github+json' \
        --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
        --header 'X-GitHub-Api-Version: 2022-11-28')

        http_code="${response: -3}"
        payload_pull="${response:0:${#response}-3}"

        if [[ $http_code -ne 200 ]]; then
            echo "Erro com o status code " $http_code
            exit -1
        fi

        tamanho=$(echo "$payload_pull" | jq '. | length')

        if [[ $tamanho -le 0 ]]; then
            echo "[PULL REQUEST] Não possí nenhum pull request aberto"
            exit 0
        fi

        echo "Total de pull request abertos: $tamanho"

        # Obtendo a data atual
        # Obtendo a data atual - 30 dias

        # MAC
        #data_atual=$(date +%F)
        #data_limite=$(date -v-30d +%F)
        #echo "Data Atual $data_atual - Data limite: $data_limite"

        #LINUX
        data_atual=$(date)
        data_limite=$(date --date='-30 day')
        data_limite=$(date -d "${data_limite}" +%Y%m%d)

        echo "Data Atual $data_atual - Data limite: $data_limite"

        for ((i=0; i<$tamanho; i++)); do

            number=$(echo "$payload_pull" | jq -r ".[$i].number")
            echo "Número do PR: $number"

            datecreated=$(echo "$payload_pull" | jq -r ".[$i].created_at")
            datecreated=$(date -d "${datecreated}" +%Y%m%d)
            echo "Data de criação do PR: $datecreated"

            is_date_before_limit=$( [ "${datecreated}" \< "${data_limite}" ] && echo true || echo false )
            echo "Data de criação do PR é menor que a data limite? $is_date_before_limit"

            !If [ "${is_date_before_limit}" = true ]; then
                # Fazendo a requisição CURL e obtendo o status code
                api_review="https://api.github.com/repos/${{ github.repository }}/pulls/${number}/reviews"

                response=""
                response=$(curl -s --write-out "%{http_code}" POST "$api_review" \
                    --header 'Accept: application/vnd.github+json' \
                    --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    --header 'X-GitHub-Api-Version: 2022-11-28' \
                    --header 'Content-Type: application/json' \
                    --data "{\"body\": \"close-pull-request: Closed by automation called date $data_atual\", \"event\": \"COMMENT\" }")

                http_code="${response: -3}"

                if [[ $http_code -ne 200 ]]; then
                    echo "[REVIEW NUMBER ${number}] com erro. Status code $http_code"
                    exit -1
                fi

                echo "[REVIEW NUMBER ${number}] Status code $http_code"

                api_self="https://api.github.com/repos/${{ github.repository }}/pulls/"${number}

                status_code=""
                status_code=$(curl -s --request PATCH $api_self \
                    --header 'Accept: application/vnd.github+json' \
                    --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    --header 'X-GitHub-Api-Version: 2022-11-28' \
                    --header 'Content-Type: application/json' \
                    --data '{"state":"closed"}' \
                    -w "%{http_code}" \
                    -o /dev/null)

                echo "[CLOSE PR NUMBER ${number}] com o status code $status_code"
            fi
        done

        echo "FIM AUTOMAÇÃO"
